    Un gestionnaire de versions permet aux développeurs de conserver un historique des modifications et des versions de tous leurs fichiers.

    Git est un gestionnaire de versions tandis que GitHub est un service en ligne qui héberge les dépôts Git. On parle alors de dépôt distant.
        git branch -d permet de supprimer une branche.

    git status permet de voir l’état des fichiers.

    git stash enregistre les modifications non indexées pour une utilisation ultérieure. 

    git log affiche l'historique des commits réalisés sur la branche courante.

    git reset --hard HEAD^ permet de réinitialiser l'index et le répertoire de travail à l'état du dernier commit.

    git commit --amend permet de sélectionner le dernier commit pour y effectuer des modifications.
        git revert HEAD^ permet d'annuler un commit en créant un nouveau commit.

    git reset est une commande puissante. Elle peut être appliquée de 3 façons différentes (--soft; --mixed; --hard).

    La commande git merge produit un conflit si une même ligne a été modifiée plusieurs fois. Dans ce cas, il faut indiquer à Git quelle ligne conserver.
Récapitulons les commandes utilisées :

    git stash permet de mettre de côté le développement en cours ;

    git stash pop permet de récupérer ce qui a été stashé ;

    git bisect (et ses options start, good, bad, reset) sert à identifier un commit problématique en parcourant l’historique ;

    git revert permet de créer un nouveau commit qui contient l’inverse du commit concerné, ce qui revient à annuler l’effet de ce dernier.
    git reset permet de revenir à l'état précédent sans créer un nouveau commit.

    git revert permet de revenir à l'état précédent en créant un nouveau commit.
    
    
    git log affiche l'historique des commits réalisés sur la branche courante.

    git reflog est identique à git log. Cette commande affiche également toutes les actions réalisées en local.

    git checkout un_identifiant_SHA-1 permet de revenir à une action donnée.

    git blame permet de savoir qui a réalisé telle modification dans un fichier, à quelle date, ligne par ligne.

    git cherry-pick un_identifiant_SHA-1 un_autre_identifiant_SHA-1 permet de sélectionner un commit et de l'appliquer sur la branche actuelle. 
    
    
    Certificat n° 772 - Délivré le 21 août
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    EXPERT GITHUB
    
    Récapitulons les commandes utilisées :

    git stash permet de mettre de côté le développement en cours ;

    git stash pop permet de récupérer ce qui a été stashé ;

    git bisect (et ses options start, good, bad, reset) sert à identifier un commit problématique en parcourant l’historique ;

    git revert permet de créer un nouveau commit qui contient l’inverse du commit concerné, ce qui revient à annuler l’effet de ce dernier.
    
        git commit --amend permet de modifier le dernier commit.

    git rebase permet de réécrire l’historique d’une branche.

    git stash permet de mettre de côté le développement en cours.

    git stash pop permet de récupérer le développement mis de côté.

    git bisect permet d’identifier un commit problématique en parcourant l’historique. 

    git revert permet d’annuler un commit.
    
    
    
    Récapitulons ce qui a été réalisé :

    Nous avons initialisé notre projet avec git flow init. Cela a eu pour conséquence non seulement de créer la branche main comme nous en avions l’habitude, mais également la branche develop, et de nous positionner sur cette dernière.

    Nous avons créé une nouvelle branche de fonctionnalité avec git flow feature start fonctionnalite1. La branche fonctionnalite1 a été créée à partir de develop.

    Nous avons réalisé un commit sur fonctionnalite1, puis exécuté git flow feature finish fonctionnalite1. Ainsi la branche fonctionnalite1 a été merge sur develop.

    Enfin nous avons créé la release avec git flow release start 0.0.1, et nous l’avons immédiatement intégrée à la branche main avec git flow release finish ‘0.0.1’.
    
    Gestion des fonctionalites avec flow 
    
        git flow init ;

    git flow feature start issue5 ;

    git add * ;

    git commit -m “#5 implémentation de la fonctionnalité” ;

    git flow feature finish issue5 ;

    git flow release start 0.0.2 ;

    git flow release finish ‘0.0.2’. 
    
    
    
    
        Les hooks permettent de lancer des scripts personnalisés, et ainsi d’effectuer des contrôles et des traitements lors des opérations Git.

    Les hooks côté client sont les scripts exécutés sur votre repository local.

    Les hooks côté serveur sont les scripts exécutés sur le repository distant.

    Git fournit un ensemble de hooks utilisables et adaptables dans le répertoire .git/hooks.
    
    
    
    
    
    
